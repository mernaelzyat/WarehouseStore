// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarehouseStores.Repository.DBContext;

#nullable disable

namespace WarehouseStores.Repository.Data.Migrations
{
    [DbContext(typeof(StorageDbContext))]
    [Migration("20240804124600_UpdateMissingProductsTable")]
    partial class UpdateMissingProductsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoriesStorage", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("StoragesId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "StoragesId");

                    b.HasIndex("StoragesId");

                    b.ToTable("CategoriesStorage");
                });

            modelBuilder.Entity("CustomerOrdersReadyOrders", b =>
                {
                    b.Property<int>("CustomerOrdersId")
                        .HasColumnType("int");

                    b.Property<int>("ReadyOrdersId")
                        .HasColumnType("int");

                    b.HasKey("CustomerOrdersId", "ReadyOrdersId");

                    b.HasIndex("ReadyOrdersId");

                    b.ToTable("CustomerOrdersReadyOrders");
                });

            modelBuilder.Entity("FloorStorage", b =>
                {
                    b.Property<int>("FloorsId")
                        .HasColumnType("int");

                    b.Property<int>("StoragesId")
                        .HasColumnType("int");

                    b.HasKey("FloorsId", "StoragesId");

                    b.HasIndex("StoragesId");

                    b.ToTable("FloorStorage");
                });

            modelBuilder.Entity("ProductsReceivedOrders", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("ReceivedOrdersId")
                        .HasColumnType("int");

                    b.HasKey("ProductsId", "ReceivedOrdersId");

                    b.HasIndex("ReceivedOrdersId");

                    b.ToTable("ProductsReceivedOrders");
                });

            modelBuilder.Entity("ShelfStorage", b =>
                {
                    b.Property<int>("ShelvesId")
                        .HasColumnType("int");

                    b.Property<int>("StoragesId")
                        .HasColumnType("int");

                    b.HasKey("ShelvesId", "StoragesId");

                    b.HasIndex("StoragesId");

                    b.ToTable("ShelfStorage");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Bill", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("PriorityId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.BillProducts", b =>
                {
                    b.Property<int?>("BillId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BillId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("BillProducts");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Categories", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.CustomerOrders", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("AvailabilityDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StatusId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.CustomerOrdersProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerOrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CustomerOrderProducts");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Customers", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialRegister")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Departments", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Employees", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Floor", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("FloorNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Floor");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.MissingProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductsId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonOfMissing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductsId");

                    b.ToTable("MissingProducts");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Priority", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Priority");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.ProductDates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDates");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Products", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SalesTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TotalStock")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.PurchaseOrderProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderProducts");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.PurchaseOrders", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("StatusId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.ReadyOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StatusId");

                    b.ToTable("ReadyOrders");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.ReadyOrdersProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReadyOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReadyOrderId");

                    b.ToTable("ReadyOrderProducts");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.ReceivedOrders", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("StorageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PurchaseOrderId")
                        .IsUnique()
                        .HasFilter("[PurchaseOrderId] IS NOT NULL");

                    b.HasIndex("StorageId");

                    b.ToTable("ReceivedOrders");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Shelf", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("ShelfNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Shelf");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Status", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CurrentStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Storage", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supervisor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.StorageDepartment", b =>
                {
                    b.Property<int?>("StorageId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("StorageId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("StorageDepartments");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Suppliers", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("CategoriesStorage", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Categories", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseStores.Core.Models.Storage", null)
                        .WithMany()
                        .HasForeignKey("StoragesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerOrdersReadyOrders", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.CustomerOrders", null)
                        .WithMany()
                        .HasForeignKey("CustomerOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseStores.Core.Models.ReadyOrders", null)
                        .WithMany()
                        .HasForeignKey("ReadyOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FloorStorage", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Floor", null)
                        .WithMany()
                        .HasForeignKey("FloorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseStores.Core.Models.Storage", null)
                        .WithMany()
                        .HasForeignKey("StoragesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsReceivedOrders", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Products", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseStores.Core.Models.ReceivedOrders", null)
                        .WithMany()
                        .HasForeignKey("ReceivedOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShelfStorage", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Shelf", null)
                        .WithMany()
                        .HasForeignKey("ShelvesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseStores.Core.Models.Storage", null)
                        .WithMany()
                        .HasForeignKey("StoragesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Bill", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Customers", "Customers")
                        .WithMany("Bills")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WarehouseStores.Core.Models.Departments", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("WarehouseStores.Core.Models.Priority", "Priority")
                        .WithMany("Bills")
                        .HasForeignKey("PriorityId");

                    b.HasOne("WarehouseStores.Core.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("WarehouseStores.Core.Models.Suppliers", "Supplier")
                        .WithMany("Bills")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Customers");

                    b.Navigation("Department");

                    b.Navigation("Priority");

                    b.Navigation("Status");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.BillProducts", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Bill", "Bill")
                        .WithMany("BillProducts")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseStores.Core.Models.Products", "Product")
                        .WithMany("BillProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.CustomerOrders", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Departments", "Department")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("WarehouseStores.Core.Models.Status", "Status")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("StatusId");

                    b.Navigation("Department");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.CustomerOrdersProducts", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.CustomerOrders", "CustomerOrder")
                        .WithMany("CustomerOrdersProducts")
                        .HasForeignKey("CustomerOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WarehouseStores.Core.Models.Products", "Product")
                        .WithMany("CustomerOrdersProducts")
                        .HasForeignKey("ProductId");

                    b.Navigation("CustomerOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.MissingProducts", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductsId");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.ProductDates", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Products", "Product")
                        .WithMany("ProductDates")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Products", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Categories", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.PurchaseOrderProducts", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Products", "Product")
                        .WithMany("PurchaseOrderProducts")
                        .HasForeignKey("ProductId");

                    b.HasOne("WarehouseStores.Core.Models.PurchaseOrders", "PurchaseOrder")
                        .WithMany("PurchaseOrderProducts")
                        .HasForeignKey("PurchaseOrderId");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.PurchaseOrders", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Departments", "Department")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("WarehouseStores.Core.Models.Priority", "Priority")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PriorityId");

                    b.HasOne("WarehouseStores.Core.Models.Status", "Status")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("StatusId");

                    b.Navigation("Department");

                    b.Navigation("Priority");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.ReadyOrders", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Departments", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("WarehouseStores.Core.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Department");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.ReadyOrdersProducts", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Products", "Product")
                        .WithMany("ReadyOrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WarehouseStores.Core.Models.ReadyOrders", "ReadyOrder")
                        .WithMany("ReadyOrderProducts")
                        .HasForeignKey("ReadyOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ReadyOrder");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.ReceivedOrders", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Bill", "Bill")
                        .WithMany("ReceivedOrders")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseStores.Core.Models.Departments", "Department")
                        .WithMany("ReceivedOrders")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WarehouseStores.Core.Models.PurchaseOrders", "PurchaseOrder")
                        .WithOne("ReceivedOrder")
                        .HasForeignKey("WarehouseStores.Core.Models.ReceivedOrders", "PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WarehouseStores.Core.Models.Storage", "Storage")
                        .WithMany("ReceivedOrders")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Bill");

                    b.Navigation("Department");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Stock", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.StorageDepartment", b =>
                {
                    b.HasOne("WarehouseStores.Core.Models.Departments", "Department")
                        .WithMany("StorageDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseStores.Core.Models.Storage", "Storage")
                        .WithMany("StorageDepartments")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Bill", b =>
                {
                    b.Navigation("BillProducts");

                    b.Navigation("ReceivedOrders");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Categories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.CustomerOrders", b =>
                {
                    b.Navigation("CustomerOrdersProducts");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Customers", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Departments", b =>
                {
                    b.Navigation("CustomerOrders");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("ReceivedOrders");

                    b.Navigation("StorageDepartments");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Priority", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Products", b =>
                {
                    b.Navigation("BillProducts");

                    b.Navigation("CustomerOrdersProducts");

                    b.Navigation("ProductDates");

                    b.Navigation("PurchaseOrderProducts");

                    b.Navigation("ReadyOrderProducts");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.PurchaseOrders", b =>
                {
                    b.Navigation("PurchaseOrderProducts");

                    b.Navigation("ReceivedOrder");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.ReadyOrders", b =>
                {
                    b.Navigation("ReadyOrderProducts");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Status", b =>
                {
                    b.Navigation("CustomerOrders");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Storage", b =>
                {
                    b.Navigation("ReceivedOrders");

                    b.Navigation("StorageDepartments");
                });

            modelBuilder.Entity("WarehouseStores.Core.Models.Suppliers", b =>
                {
                    b.Navigation("Bills");
                });
#pragma warning restore 612, 618
        }
    }
}
